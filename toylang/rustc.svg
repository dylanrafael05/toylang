<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (633,403,170 samples, 3.04%)</title><rect x="0.0753%" y="149" width="3.0405%" height="15" fill="rgb(227,0,7)"/><text x="0.3253%" y="159.50">LLV..</text></g><g><title>codegen_generate_lto_work (146,303,184 samples, 0.70%)</title><rect x="2.4135%" y="133" width="0.7023%" height="15" fill="rgb(217,0,24)"/><text x="2.6635%" y="143.50"></text></g><g><title>LLVM_thin_lto_global_analysis (146,223,932 samples, 0.70%)</title><rect x="2.4138%" y="117" width="0.7019%" height="15" fill="rgb(221,193,54)"/><text x="2.6638%" y="127.50"></text></g><g><title>MIR_borrow_checking (33,098,993 samples, 0.16%)</title><rect x="3.1158%" y="133" width="0.1589%" height="15" fill="rgb(248,212,6)"/><text x="3.3658%" y="143.50"></text></g><g><title>misc_checking_1 (44,997,578 samples, 0.22%)</title><rect x="3.3252%" y="133" width="0.2160%" height="15" fill="rgb(208,68,35)"/><text x="3.5752%" y="143.50"></text></g><g><title>lint_mod (23,063,529 samples, 0.11%)</title><rect x="3.6802%" y="69" width="0.1107%" height="15" fill="rgb(232,128,0)"/><text x="3.9302%" y="79.50"></text></g><g><title>incr_comp_intern_dep_graph_node (23,062,230 samples, 0.11%)</title><rect x="3.6802%" y="53" width="0.1107%" height="15" fill="rgb(207,160,47)"/><text x="3.9302%" y="63.50"></text></g><g><title>incr_comp_encode_dep_graph (23,060,022 samples, 0.11%)</title><rect x="3.6802%" y="37" width="0.1107%" height="15" fill="rgb(228,23,34)"/><text x="3.9302%" y="47.50"></text></g><g><title>lint_mod (43,158,793 samples, 0.21%)</title><rect x="3.6750%" y="85" width="0.2072%" height="15" fill="rgb(218,30,26)"/><text x="3.9250%" y="95.50"></text></g><g><title>lint_checking (45,380,346 samples, 0.22%)</title><rect x="3.6651%" y="117" width="0.2178%" height="15" fill="rgb(220,122,19)"/><text x="3.9151%" y="127.50"></text></g><g><title>module_lints (45,345,494 samples, 0.22%)</title><rect x="3.6653%" y="101" width="0.2177%" height="15" fill="rgb(250,228,42)"/><text x="3.9153%" y="111.50"></text></g><g><title>live_symbols_and_ignored_derived_traits (21,136,206 samples, 0.10%)</title><rect x="3.8829%" y="117" width="0.1015%" height="15" fill="rgb(240,193,28)"/><text x="4.1329%" y="127.50"></text></g><g><title>trait_def (85,741,636 samples, 0.41%)</title><rect x="4.0406%" y="85" width="0.4116%" height="15" fill="rgb(216,20,37)"/><text x="4.2906%" y="95.50"></text></g><g><title>metadata_decode_entry_trait_def (85,732,898 samples, 0.41%)</title><rect x="4.0407%" y="69" width="0.4115%" height="15" fill="rgb(206,188,39)"/><text x="4.2907%" y="79.50"></text></g><g><title>check_mod_privacy (101,560,161 samples, 0.49%)</title><rect x="3.9865%" y="101" width="0.4875%" height="15" fill="rgb(217,207,13)"/><text x="4.2365%" y="111.50"></text></g><g><title>misc_checking_3 (197,158,167 samples, 0.95%)</title><rect x="3.5412%" y="133" width="0.9464%" height="15" fill="rgb(231,73,38)"/><text x="3.7912%" y="143.50"></text></g><g><title>privacy_checking_modules (104,833,281 samples, 0.50%)</title><rect x="3.9844%" y="117" width="0.5032%" height="15" fill="rgb(225,20,46)"/><text x="4.2344%" y="127.50"></text></g><g><title>coherence_checking (22,256,706 samples, 0.11%)</title><rect x="4.5087%" y="117" width="0.1068%" height="15" fill="rgb(210,31,41)"/><text x="4.7587%" y="127.50"></text></g><g><title>type_collecting (24,001,594 samples, 0.12%)</title><rect x="4.6839%" y="117" width="0.1152%" height="15" fill="rgb(221,200,47)"/><text x="4.9339%" y="127.50"></text></g><g><title>typeck (40,271,890 samples, 0.19%)</title><rect x="4.7991%" y="117" width="0.1933%" height="15" fill="rgb(226,26,5)"/><text x="5.0491%" y="127.50"></text></g><g><title>analysis (406,290,593 samples, 1.95%)</title><rect x="3.1158%" y="149" width="1.9503%" height="15" fill="rgb(249,33,26)"/><text x="3.3658%" y="159.50">a..</text></g><g><title>type_check_crate (120,498,143 samples, 0.58%)</title><rect x="4.4876%" y="133" width="0.5784%" height="15" fill="rgb(235,183,28)"/><text x="4.7376%" y="143.50"></text></g><g><title>codegen_copy_artifacts_from_incr_cache (4,742,704,850 samples, 22.77%)</title><rect x="5.0660%" y="149" width="22.7661%" height="15" fill="rgb(221,5,38)"/><text x="5.3160%" y="159.50">codegen_copy_artifacts_from_incr_cac..</text></g><g><title>codegen_module (32,871,074 samples, 0.16%)</title><rect x="28.7482%" y="133" width="0.1578%" height="15" fill="rgb(247,18,42)"/><text x="28.9982%" y="143.50"></text></g><g><title>incr_comp_encode_dep_graph (50,370,017 samples, 0.24%)</title><rect x="29.2328%" y="85" width="0.2418%" height="15" fill="rgb(241,131,45)"/><text x="29.4828%" y="95.50"></text></g><g><title>fn_sig (21,503,460 samples, 0.10%)</title><rect x="29.5087%" y="69" width="0.1032%" height="15" fill="rgb(249,31,29)"/><text x="29.7587%" y="79.50"></text></g><g><title>metadata_decode_entry_fn_sig (21,497,721 samples, 0.10%)</title><rect x="29.5088%" y="53" width="0.1032%" height="15" fill="rgb(225,111,53)"/><text x="29.7588%" y="63.50"></text></g><g><title>mir_shims (30,309,572 samples, 0.15%)</title><rect x="29.4856%" y="85" width="0.1455%" height="15" fill="rgb(238,160,17)"/><text x="29.7356%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (32,072,148 samples, 0.15%)</title><rect x="29.6496%" y="69" width="0.1540%" height="15" fill="rgb(214,148,48)"/><text x="29.8996%" y="79.50"></text></g><g><title>optimized_mir (37,352,417 samples, 0.18%)</title><rect x="29.6315%" y="85" width="0.1793%" height="15" fill="rgb(232,36,49)"/><text x="29.8815%" y="95.50"></text></g><g><title>resolve_instance (29,224,270 samples, 0.14%)</title><rect x="29.8108%" y="85" width="0.1403%" height="15" fill="rgb(209,103,24)"/><text x="30.0608%" y="95.50"></text></g><g><title>upstream_monomorphizations (124,405,885 samples, 0.60%)</title><rect x="29.9769%" y="69" width="0.5972%" height="15" fill="rgb(229,88,8)"/><text x="30.2269%" y="79.50"></text></g><g><title>exported_symbols (123,617,616 samples, 0.59%)</title><rect x="29.9807%" y="53" width="0.5934%" height="15" fill="rgb(213,181,19)"/><text x="30.2307%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (123,588,104 samples, 0.59%)</title><rect x="29.9808%" y="37" width="0.5933%" height="15" fill="rgb(254,191,54)"/><text x="30.2308%" y="47.50"></text></g><g><title>upstream_monomorphizations_for (124,961,825 samples, 0.60%)</title><rect x="29.9742%" y="85" width="0.5998%" height="15" fill="rgb(241,83,37)"/><text x="30.2242%" y="95.50"></text></g><g><title>resolve_instance (24,679,248 samples, 0.12%)</title><rect x="30.5828%" y="69" width="0.1185%" height="15" fill="rgb(233,36,39)"/><text x="30.8328%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (373,080,855 samples, 1.79%)</title><rect x="28.9105%" y="101" width="1.7909%" height="15" fill="rgb(226,3,54)"/><text x="29.1605%" y="111.50">m..</text></g><g><title>vtable_entries (26,470,402 samples, 0.13%)</title><rect x="30.5743%" y="85" width="0.1271%" height="15" fill="rgb(245,192,40)"/><text x="30.8243%" y="95.50"></text></g><g><title>monomorphization_collector (383,063,294 samples, 1.84%)</title><rect x="28.9105%" y="117" width="1.8388%" height="15" fill="rgb(238,167,29)"/><text x="29.1605%" y="127.50">m..</text></g><g><title>collect_and_partition_mono_items (401,508,716 samples, 1.93%)</title><rect x="28.9073%" y="133" width="1.9273%" height="15" fill="rgb(232,182,51)"/><text x="29.1573%" y="143.50">c..</text></g><g><title>incr_comp_encode_dep_graph (24,388,076 samples, 0.12%)</title><rect x="30.8813%" y="117" width="0.1171%" height="15" fill="rgb(231,60,39)"/><text x="31.1313%" y="127.50"></text></g><g><title>find_cgu_reuse (32,535,079 samples, 0.16%)</title><rect x="30.8428%" y="133" width="0.1562%" height="15" fill="rgb(208,69,12)"/><text x="31.0928%" y="143.50"></text></g><g><title>codegen_crate (660,855,511 samples, 3.17%)</title><rect x="27.8322%" y="149" width="3.1723%" height="15" fill="rgb(235,93,37)"/><text x="28.0822%" y="159.50">cod..</text></g><g><title>codegen_module_optimize (97,727,164 samples, 0.47%)</title><rect x="31.0044%" y="149" width="0.4691%" height="15" fill="rgb(213,116,39)"/><text x="31.2544%" y="159.50"></text></g><g><title>LLVM_module_optimize (70,729,216 samples, 0.34%)</title><rect x="31.1340%" y="133" width="0.3395%" height="15" fill="rgb(222,207,29)"/><text x="31.3840%" y="143.50"></text></g><g><title>LLVM_lto_optimize (84,663,192 samples, 0.41%)</title><rect x="32.1777%" y="133" width="0.4064%" height="15" fill="rgb(206,96,30)"/><text x="32.4277%" y="143.50"></text></g><g><title>LLVM_module_codegen (383,667,757 samples, 1.84%)</title><rect x="32.5841%" y="133" width="1.8417%" height="15" fill="rgb(218,138,4)"/><text x="32.8341%" y="143.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (382,189,808 samples, 1.83%)</title><rect x="32.5912%" y="117" width="1.8346%" height="15" fill="rgb(250,191,14)"/><text x="32.8412%" y="127.50">L..</text></g><g><title>codegen_module_perform_lto (632,678,007 samples, 3.04%)</title><rect x="31.4735%" y="149" width="3.0370%" height="15" fill="rgb(239,60,40)"/><text x="31.7235%" y="159.50">cod..</text></g><g><title>incr_comp_prepare_load_dep_graph (690,381,048 samples, 3.31%)</title><rect x="34.6713%" y="149" width="3.3140%" height="15" fill="rgb(206,27,48)"/><text x="34.9213%" y="159.50">inc..</text></g><g><title>incr_comp_load_dep_graph (295,661,141 samples, 1.42%)</title><rect x="36.5660%" y="133" width="1.4192%" height="15" fill="rgb(225,35,8)"/><text x="36.8160%" y="143.50"></text></g><g><title>incr_comp_prepare_session_directory (1,237,081,286 samples, 5.94%)</title><rect x="37.9853%" y="149" width="5.9383%" height="15" fill="rgb(250,213,24)"/><text x="38.2353%" y="159.50">incr_com..</text></g><g><title>copy_all_cgu_workproducts_to_incr_comp_cache_dir (740,571,997 samples, 3.55%)</title><rect x="45.7041%" y="117" width="3.5549%" height="15" fill="rgb(247,123,22)"/><text x="45.9541%" y="127.50">copy..</text></g><g><title>finish_ongoing_codegen (1,111,423,712 samples, 5.34%)</title><rect x="43.9245%" y="133" width="5.3351%" height="15" fill="rgb(231,138,38)"/><text x="44.1745%" y="143.50">finish_..</text></g><g><title>incr_comp_finalize_session_directory (677,858,046 samples, 3.25%)</title><rect x="49.2596%" y="133" width="3.2539%" height="15" fill="rgb(231,145,46)"/><text x="49.5096%" y="143.50">inc..</text></g><g><title>link_binary_check_files_are_writeable (139,350,400 samples, 0.67%)</title><rect x="52.5446%" y="101" width="0.6689%" height="15" fill="rgb(251,118,11)"/><text x="52.7946%" y="111.50"></text></g><g><title>link_binary_remove_temps (119,644,897 samples, 0.57%)</title><rect x="53.2135%" y="101" width="0.5743%" height="15" fill="rgb(217,147,25)"/><text x="53.4635%" y="111.50"></text></g><g><title>link_crate (8,711,459,974 samples, 41.82%)</title><rect x="52.5134%" y="133" width="41.8171%" height="15" fill="rgb(247,81,37)"/><text x="52.7634%" y="143.50">link_crate</text></g><g><title>link_binary (8,711,420,274 samples, 41.82%)</title><rect x="52.5136%" y="117" width="41.8169%" height="15" fill="rgb(209,12,38)"/><text x="52.7636%" y="127.50">link_binary</text></g><g><title>run_linker (8,445,977,818 samples, 40.54%)</title><rect x="53.7878%" y="101" width="40.5427%" height="15" fill="rgb(227,1,9)"/><text x="54.0378%" y="111.50">run_linker</text></g><g><title>link (10,508,222,616 samples, 50.44%)</title><rect x="43.9235%" y="149" width="50.4420%" height="15" fill="rgb(248,47,43)"/><text x="44.1735%" y="159.50">link</text></g><g><title>expand_proc_macro (44,299,656 samples, 0.21%)</title><rect x="95.9240%" y="101" width="0.2126%" height="15" fill="rgb(221,10,30)"/><text x="96.1740%" y="111.50"></text></g><g><title>metadata_register_crate (663,369,115 samples, 3.18%)</title><rect x="96.1610%" y="101" width="3.1843%" height="15" fill="rgb(210,229,1)"/><text x="96.4110%" y="111.50">met..</text></g><g><title>metadata_register_crate (418,841,983 samples, 2.01%)</title><rect x="97.3348%" y="85" width="2.0105%" height="15" fill="rgb(222,148,37)"/><text x="97.5848%" y="95.50">m..</text></g><g><title>metadata_register_crate (76,913,671 samples, 0.37%)</title><rect x="98.9762%" y="69" width="0.3692%" height="15" fill="rgb(234,67,33)"/><text x="99.2262%" y="79.50"></text></g><g><title>module_children (32,691,607 samples, 0.16%)</title><rect x="99.3454%" y="101" width="0.1569%" height="15" fill="rgb(247,98,35)"/><text x="99.5954%" y="111.50"></text></g><g><title>metadata_decode_entry_module_children (32,630,132 samples, 0.16%)</title><rect x="99.3457%" y="85" width="0.1566%" height="15" fill="rgb(247,138,52)"/><text x="99.5957%" y="95.50"></text></g><g><title>macro_expand_crate (1,051,719,692 samples, 5.05%)</title><rect x="94.4549%" y="133" width="5.0485%" height="15" fill="rgb(213,79,30)"/><text x="94.7049%" y="143.50">macro_..</text></g><g><title>expand_crate (1,051,713,466 samples, 5.05%)</title><rect x="94.4549%" y="117" width="5.0485%" height="15" fill="rgb(246,177,23)"/><text x="94.7049%" y="127.50">expand..</text></g><g><title>resolver_for_lowering (1,059,993,432 samples, 5.09%)</title><rect x="94.4525%" y="149" width="5.0882%" height="15" fill="rgb(230,62,27)"/><text x="94.7025%" y="159.50">resolv..</text></g><g><title>serialize_dep_graph (73,974,041 samples, 0.36%)</title><rect x="99.5619%" y="149" width="0.3551%" height="15" fill="rgb(216,154,8)"/><text x="99.8119%" y="159.50"></text></g><g><title>incr_comp_persist_result_cache (67,616,632 samples, 0.32%)</title><rect x="99.5924%" y="133" width="0.3246%" height="15" fill="rgb(244,35,45)"/><text x="99.8424%" y="143.50"></text></g><g><title>incr_comp_serialize_result_cache (53,906,841 samples, 0.26%)</title><rect x="99.6582%" y="117" width="0.2588%" height="15" fill="rgb(251,115,12)"/><text x="99.9082%" y="127.50"></text></g><g><title>encode_query_results (48,174,990 samples, 0.23%)</title><rect x="99.6858%" y="101" width="0.2313%" height="15" fill="rgb(240,54,50)"/><text x="99.9358%" y="111.50"></text></g><g><title>encode_query_results_for (48,115,840 samples, 0.23%)</title><rect x="99.6860%" y="85" width="0.2310%" height="15" fill="rgb(233,84,52)"/><text x="99.9360%" y="95.50"></text></g><g><title>all (20,832,288,613 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(207,117,47)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (20,832,288,613 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(249,43,39)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>